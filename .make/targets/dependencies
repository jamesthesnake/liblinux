# Build rules for dependency files

# Rule template for dependency data files.
#
# $(1) = path to source file
# $(2) = path to dependency file
# $(3) = make function that converts a path to a source file
#        to a list of paths to all its targets
#
define dependency_file_rule_template
dependency_files += $(2)

$(call rule_template,$(2),$$(call compiler.generate_dependency_data,$$@,$$<,$$(call $(3),$$<)),$(1))
endef

# Computes the parameters for and evaluates the dependency file rule template.
#
# $(1) = path to source source file
# $(2) = make function that converts a path to a source file
#        to a list of paths to all its targets
#
generate_dependency_file_rule = $(call dependency_file_rule_template,$(1),$(call source_to_dependency,$(1)),$(2))

# Generate dependency file rules for process startup code and examples.
$(foreach file,$(sources_start),$(eval $(call generate_dependency_file_rule,$(file),source_to_start_object)))
$(foreach file,$(sources_examples),$(eval $(call generate_dependency_file_rule,$(file),example_to_executables)))

targets += $(dependency_files)

# The wildcard function returns existing files that match its parameters.
# This prevents make from including files that don't exist.
#
# Make tries to rebuild included files, without the wildcard function
# the dependency data files would be generated with every invocation of make,
# even make clean.
#
# References:
#
#     https://www.gnu.org/software/make/manual/html_node/Remaking-Makefiles.html
#     https://make.mad-scientist.net/papers/advanced-auto-dependency-generation/#include
#     https://make.mad-scientist.net/constructed-include-files/
#
include $(wildcard $(dependency_files))
