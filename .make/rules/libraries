# Rule template for static libraries.
#
# Arguments:
#   $(1) = path to static library
#   $(2) = list of object files
#
# Returns:
#   rules for generating static library $(1) from the objects in $(2)
#
static_library_rule_template = $(call rule_template,$(1),$$(call archiver.create,$$@,$$^),$(2))

# Rule template for dynamic libraries.
#
# Arguments:
#   $(1) = path to dynamic library
#   $(2) = list of object files
#
# Returns:
#   rules for generating dynamic library $(1) from the objects in $(2)
#
dynamic_library_rule_template = $(call rule_template,$(1),$$(call compiler.compile_dynamic_library,$$@,$$^),$(2))

# Rule template for libraries corresponding to the current linkage.
#
# Arguments:
#   $(1) = library name
#   $(2) = list of object files
#
# Variables:
#   $(linkage) = linkage type: static | dynamic
#
# Returns:
#   rules for generating library $(1) from the objects in $(2)
#
library_rule_template = $(call $(linkage)_library_rule_template,$(call as_library,$(1)),$(2))

# Evaluates a library rule template for the current linkage.
#
# Arguments:
#   $(1) = library name
#   $(2) = list of object files
#
# Variables:
#   $(linkage) = linkage type: static | dynamic
#
# Returns:
#   Îµ
#
evaluate_library_rule = $(eval $(call library_rule_template,$(1),$(2)))
