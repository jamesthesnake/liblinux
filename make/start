# Converts the path to a startfile source to the path of its target.
# May be written in assembly or C.
#
# Arguments:
#   $(1) = path to process startup source file
#
# Returns:
#   path to the startfile target
#
source_to_start_object = $(patsubst $(start_architecture_directory)/%,$(build_start_directory)/%.o,$(basename $(1)))

objects_start = $(call source_to_start_object,$(sources_start))

# Build targets for the liblinux process startup objects:
#
#     _start.o
#     liblinux_start.o

# Rule template for process start objects.
#
# $(1) = path to start code file
# $(2) = path to start object file
#
define start_object_rule_template
$(call rule_template,$(2),$$(call compiler.compile_startup_object,$$@,$$<),$(1) $(3))
endef

# Computes the parameters for and evaluates the start object rule template.
#
# $(1) = path to start code file
#
generate_start_object_rule = $(call start_object_rule_template,$(1),$(call source_to_start_object,$(1)),$(call to_dependency,$(1)))

# Generate start object rules for all start code files
$(foreach file,$(sources_start),$(eval $(call generate_start_object_rule,$(file))) $(eval $(call generate_dependency_file_rule,$(file),source_to_start_object)))
