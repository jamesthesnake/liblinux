# Rule template for example executables.
#
# The reason why the executables depend on their dependency data file
# is to trigger the generation of dependency data when it is updated.
# Once generated, future executions of make will benefit from the dependency data.
# Dependency data file generation rules are defined in make/targets/dependencies.
#
# $(1) = path to source file
# $(2) = path to executable file
# $(3) = path to dependency data file
# $(4) = linkage type: static | dynamic
#
# References:
#
#     https://make.mad-scientist.net/papers/advanced-auto-dependency-generation/#depdelete
#
define example_rule_template
examples_$(4)_targets += $(2)

$(2) : $(1) $(3) $$($(4)_library) $$(objects_start) $$(gcc_wrapper)
	$$(call ensure_directory_exists,$$(@D))
	$$(call gcc.compile_example,$$@,$$<,$(4))
endef

# Computes the parameters for and evaluates the example rule template.
#
# $(1) = path to example source file
# $(2) = linkage type: static | dynamic
#
generate_example_rule = $(call example_rule_template,$(1),$(call example_to_executable,$(1),$(2)),$(call source_to_dependency,$(1)),$(2))

# Rule generators for statically and dynamically linked example executables,
# either individually or both a the same time.
#
# $(1) = path to example source file
#
generate_static_example_rule = $(call generate_example_rule,$(1),static)
generate_dynamic_example_rule = $(call generate_example_rule,$(1),dynamic)

define generate_example_rules
$(call generate_static_example_rule,$(1))

$(call generate_dynamic_example_rule,$(1))
endef

# Generate example executable rules for every example source file
$(foreach example,$(sources_examples),$(eval $(call generate_example_rules,$(example))))

# Compute list of all example targets
examples_targets += $(examples_static_targets) $(examples_dynamic_targets)
targets += $(examples_targets)
