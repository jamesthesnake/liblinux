# Build rules for dependency files

define generate_dependency_file_rule
dependency_files += $(1)
$(1) : $(2)
	$$(call compiler.generate_dependency_data,$$@,$$<,$$(call $(3),$$<))
endef

$(foreach file,$(sources_library),$(eval $(call generate_dependency_file_rule,$(call source_to_dependency,$(file)),$(file),source_to_objects)))

$(foreach file,$(sources_examples),$(eval $(call generate_dependency_file_rule,$(call source_to_dependency,$(file)),$(file),example_to_executables)))

undefine generate_dependency_file_rule

targets += $(dependency_files)

# The wildcard function returns existing files that match its parameters.
# This prevents make from including files that don't exist.
#
# Make tries to rebuild included files, without the wildcard function
# the dependency data files would be generated with every invocation of make,
# even make clean.
#
# References:
#
#     https://www.gnu.org/software/make/manual/html_node/Remaking-Makefiles.html
#     https://make.mad-scientist.net/papers/advanced-auto-dependency-generation/#include
#     https://make.mad-scientist.net/constructed-include-files/
#
include $(wildcard $(dependency_files))
